{"version":3,"file":"index.es.js","sources":["../src/types/index.ts","../src/index.ts"],"sourcesContent":["export type IWrapSelector = string | string[];\n\nexport enum IHandleRootTags {\n    'replace' = 'replace',\n    'remove' = 'remove',\n}\nexport type IOptions = {\n    wrapSelector: IWrapSelector;\n    handleRootTags?: IHandleRootTags;\n};\n","import PostCSS, { Rule } from 'postcss';\nimport { IHandleRootTags, IOptions } from './types';\n\nconst checkParameters = ({ wrapSelector, handleRootTags }: IOptions): void => {\n    if (typeof wrapSelector !== 'string' && !Array.isArray(wrapSelector)) {\n        throw new Error(\n            'postcss-wrap-plugin: wrapSelector option should be of type a string or an array.',\n        );\n    }\n\n    if (!wrapSelector.length) {\n        throw new Error('postcss-wrap-plugin: empty wrapSelector option.');\n    }\n\n    if (handleRootTags && typeof handleRootTags !== 'string') {\n        throw new Error(\n            'postcss-wrap-plugin: handleRootTags option incorrect type.',\n        );\n    }\n}\n\nconst ROOT_TAG_REGEXP = /\\b(html|body)\\b/g;\n\nclass WrapPlugin {\n    public wrapSelectors: string[];\n    public handleRootTags: IHandleRootTags | null;\n\n    constructor(options: IOptions) {\n        checkParameters(options);\n\n        const { wrapSelector, handleRootTags } = options;\n\n        this.wrapSelectors = Array.isArray(wrapSelector)\n            ? wrapSelector\n            : [wrapSelector];\n        this.handleRootTags = handleRootTags || null;\n    }\n\n    checkIsCssRuleKeyframes(cssRule: Rule): boolean {\n        const { parent } = cssRule;\n\n        return parent.type === 'atrule' && parent.name.includes('keyframes');\n    }\n\n    isRootTag(selector: string): boolean {\n        ROOT_TAG_REGEXP.lastIndex = 0;\n\n        return ROOT_TAG_REGEXP.test(selector);\n    }\n\n    addWrapToRootSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => {\n                if (this.handleRootTags === IHandleRootTags['remove']) {\n                    return wrapSelector + selector.replace(ROOT_TAG_REGEXP, '');\n                }\n\n                if (this.handleRootTags === IHandleRootTags['replace']) {\n                    return `${wrapSelector}.${selector}`;\n                }\n\n                throw new Error('Incorrect value for handleRootTags options');\n            })\n            .join(', ');\n    }\n\n    addWrapToSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => `${wrapSelector} ${selector}`)\n            .join(', ');\n    }\n\n    wrapCSSSelector(selector: string): string | null {\n        if (selector === '') {\n            return null;\n        }\n\n        if (this.isRootTag(selector) && this.handleRootTags) {\n            return this.addWrapToRootSelector(selector);\n        }\n\n        return this.addWrapToSelector(selector);\n    }\n\n    wrapCssRuleSelector(cssRuleSelector: string): string {\n        return cssRuleSelector\n            .split(',')\n            .map((selector: string) => this.wrapCSSSelector(selector.trim()))\n            .filter((cssSelector: string | null) => cssSelector)\n            .join(', ');\n    }\n\n    checkIncludeCssRule(cssRule: Rule): boolean {\n        // Do not prefix keyframes rules.\n        if (this.checkIsCssRuleKeyframes(cssRule)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    runWrap() {\n        return (css: Rule): boolean | void => {\n            return css.walkRules((cssRule: Rule) => {\n                if (this.checkIncludeCssRule(cssRule)) {\n                    const { selector } = cssRule;\n\n                    cssRule.selector = this.wrapCssRuleSelector(selector);\n                }\n            });\n        };\n    }\n}\n\nexport default PostCSS.plugin('postcss-wrap-plugin', (...options) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    return new WrapPlugin(...options).runWrap();\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAY,eAGX;AAHD,WAAY,eAAe;IACvB,sCAAqB,CAAA;IACrB,oCAAmB,CAAA;AACvB,CAAC,EAHW,eAAe,KAAf,eAAe;;ACC3B,IAAM,eAAe,GAAG,UAAC,EAA0C;QAAxC,8BAAY,EAAE,kCAAc;IACnD,IAAI,OAAO,YAAY,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QAClE,MAAM,IAAI,KAAK,CACX,kFAAkF,CACrF,CAAC;KACL;IAED,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;QACtB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;KACtE;IAED,IAAI,cAAc,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;QACtD,MAAM,IAAI,KAAK,CACX,4DAA4D,CAC/D,CAAC;KACL;AACL,CAAC,CAAA;AAED,IAAM,eAAe,GAAG,kBAAkB,CAAC;AAE3C;IAII,oBAAY,OAAiB;QACzB,eAAe,CAAC,OAAO,CAAC,CAAC;QAEjB,IAAA,mCAAY,EAAE,uCAAc,CAAa;QAEjD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;cAC1C,YAAY;cACZ,CAAC,YAAY,CAAC,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,cAAc,IAAI,IAAI,CAAC;KAChD;IAED,4CAAuB,GAAvB,UAAwB,OAAa;QACzB,IAAA,uBAAM,CAAa;QAE3B,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;KACxE;IAED,8BAAS,GAAT,UAAU,QAAgB;QACtB,eAAe,CAAC,SAAS,GAAG,CAAC,CAAC;QAE9B,OAAO,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACzC;IAED,0CAAqB,GAArB,UAAsB,QAAgB;QAAtC,iBAcC;QAbG,OAAO,IAAI,CAAC,aAAa;aACpB,GAAG,CAAC,UAAC,YAAoB;YACtB,IAAI,KAAI,CAAC,cAAc,KAAK,eAAe,CAAC,QAAQ,CAAC,EAAE;gBACnD,OAAO,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;aAC/D;YAED,IAAI,KAAI,CAAC,cAAc,KAAK,eAAe,CAAC,SAAS,CAAC,EAAE;gBACpD,OAAU,YAAY,SAAI,QAAU,CAAC;aACxC;YAED,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SACjE,CAAC;aACD,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;IAED,sCAAiB,GAAjB,UAAkB,QAAgB;QAC9B,OAAO,IAAI,CAAC,aAAa;aACpB,GAAG,CAAC,UAAC,YAAoB,IAAK,OAAG,YAAY,SAAI,QAAU,GAAA,CAAC;aAC5D,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;IAED,oCAAe,GAAf,UAAgB,QAAgB;QAC5B,IAAI,QAAQ,KAAK,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE;YACjD,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;SAC/C;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;KAC3C;IAED,wCAAmB,GAAnB,UAAoB,eAAuB;QAA3C,iBAMC;QALG,OAAO,eAAe;aACjB,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,UAAC,QAAgB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,GAAA,CAAC;aAChE,MAAM,CAAC,UAAC,WAA0B,IAAK,OAAA,WAAW,GAAA,CAAC;aACnD,IAAI,CAAC,IAAI,CAAC,CAAC;KACnB;IAED,wCAAmB,GAAnB,UAAoB,OAAa;;QAE7B,IAAI,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE;YACvC,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;KACf;IAED,4BAAO,GAAP;QAAA,iBAUC;QATG,OAAO,UAAC,GAAS;YACb,OAAO,GAAG,CAAC,SAAS,CAAC,UAAC,OAAa;gBAC/B,IAAI,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE;oBAC3B,IAAA,2BAAQ,CAAa;oBAE7B,OAAO,CAAC,QAAQ,GAAG,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;iBACzD;aACJ,CAAC,CAAC;SACN,CAAC;KACL;IACL,iBAAC;AAAD,CAAC,IAAA;AAED,YAAe,OAAO,CAAC,MAAM,CAAC,qBAAqB,EAAE;IAAC,iBAAU;SAAV,UAAU,EAAV,qBAAU,EAAV,IAAU;QAAV,4BAAU;;;;IAG5D,OAAO,KAAI,UAAU,YAAV,UAAU,2BAAI,OAAO,MAAE,OAAO,EAAE,CAAC;AAChD,CAAC,CAAC,CAAC;;;;"}