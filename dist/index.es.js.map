{"version":3,"file":"index.es.js","sources":["../src/index.ts"],"sourcesContent":["import PostCSS, { Rule } from 'postcss';\nimport { IOptions, IWrapSelector } from './types';\n\nconst checkParameters = (\n    wrapSelector: IWrapSelector,\n    { isReplaceRootTags }: IOptions,\n): void => {\n    if (typeof wrapSelector !== 'string' || !Array.isArray(wrapSelector)) {\n        throw new Error(\n            'postcss-wrap-plugin: wrapSelector option should be of type a string or an array.',\n        );\n    }\n\n    if (!wrapSelector.length) {\n        throw new Error('postcss-wrap-plugin: empty wrapSelector option.');\n    }\n\n    if (typeof isReplaceRootTags !== 'boolean') {\n        throw new Error(\n            'postcss-wrap-plugin: isReplaceRootTags option should be a boolean.',\n        );\n    }\n};\n\nclass WrapPlugin {\n    public wrapSelectors: string[];\n    public isReplaceRootTags: boolean;\n\n    constructor(wrapSelector: IWrapSelector, options: IOptions = {}) {\n        checkParameters(wrapSelector, options);\n\n        this.wrapSelectors = Array.isArray(wrapSelector)\n            ? wrapSelector\n            : [wrapSelector];\n        this.isReplaceRootTags = options.isReplaceRootTags || false;\n    }\n\n    checkCssRuleKeyframes(cssRule: Rule): boolean {\n        const { parent } = cssRule;\n\n        return parent.type !== 'atrule' || !parent.name.includes('keyframes');\n    }\n\n    isRootTag(selector: string): boolean {\n        return selector === 'html' || selector === 'body';\n    }\n\n    addWrapToSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => wrapSelector + ' ' + selector)\n            .join(', ');\n    }\n\n    addWrapToRootSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => wrapSelector + '.' + selector)\n            .join(', ');\n    }\n\n    wrapCSSSelector(selector: string): string | null {\n        if (selector === '') {\n            return null;\n        }\n\n        if (this.isRootTag(selector) && this.isReplaceRootTags) {\n            return this.addWrapToRootSelector(selector);\n        }\n\n        return this.addWrapToSelector(selector);\n    }\n\n    wrapCssRuleSelector(cssRuleSelector: string): string {\n        return cssRuleSelector\n            .split(',')\n            .map((selector: string) => this.wrapCSSSelector(selector.trim()))\n            .filter((cssSelector: string | null) => cssSelector)\n            .join(', ');\n    }\n\n    checkIncludeCssRule(cssRule: Rule): boolean {\n        // Do not prefix keyframes rules.\n        if (this.checkCssRuleKeyframes(cssRule)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    runWrap() {\n        return (css: Rule): void => {\n            css.walkRules((cssRule: Rule) => {\n                if (this.checkIncludeCssRule(cssRule)) {\n                    const { selector } = cssRule;\n\n                    cssRule.selector = this.wrapCssRuleSelector(selector);\n                }\n            });\n        };\n    }\n}\n\nconst myPlugin: PostCSS.Plugin<string> = PostCSS.plugin(\n    'postcss-wrap-plugin',\n    (...options) => {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        // @ts-ignore\n        return new WrapPlugin(...options).runWrap();\n    },\n);\n\nmodule.exports = myPlugin;\n"],"names":["wrapSelector","options","_a","isReplaceRootTags","Array","isArray","Error","length","checkParameters","this","wrapSelectors","WrapPlugin","cssRule","parent","type","name","includes","selector","map","join","isRootTag","addWrapToRootSelector","addWrapToSelector","cssRuleSelector","split","_this","wrapCSSSelector","trim","filter","cssSelector","checkCssRuleKeyframes","css","walkRules","checkIncludeCssRule","wrapCssRuleSelector","myPlugin","PostCSS","plugin","_i","runWrap","module","exports"],"mappings":";;;;;;;;;;;;;;uQAGA,iBAyBI,WAAYA,EAA6BC,gBAAAA,MAzBrB,SACpBD,EACAE,OAAEC,sBAEF,GAA4B,iBAAjBH,IAA8BI,MAAMC,QAAQL,GACnD,MAAM,IAAIM,MACN,oFAIR,IAAKN,EAAaO,OACd,MAAM,IAAID,MAAM,mDAGpB,GAAiC,kBAAtBH,EACP,MAAM,IAAIG,MACN,sEAUJE,CAAgBR,EAAcC,GAE9BQ,KAAKC,cAAgBN,MAAMC,QAAQL,GAC7BA,EACA,CAACA,GACPS,KAAKN,kBAAoBF,EAAQE,oBAAqB,EAiE9D,OA9DIQ,kCAAA,SAAsBC,GACV,IAAAC,WAER,MAAuB,WAAhBA,EAAOC,OAAsBD,EAAOE,KAAKC,SAAS,cAG7DL,sBAAA,SAAUM,GACN,MAAoB,SAAbA,GAAoC,SAAbA,GAGlCN,8BAAA,SAAkBM,GACd,OAAOR,KAAKC,cACPQ,KAAI,SAAClB,GAAyB,OAAAA,EAAe,IAAMiB,KACnDE,KAAK,OAGdR,kCAAA,SAAsBM,GAClB,OAAOR,KAAKC,cACPQ,KAAI,SAAClB,GAAyB,OAAAA,EAAe,IAAMiB,KACnDE,KAAK,OAGdR,4BAAA,SAAgBM,GACZ,MAAiB,KAAbA,EACO,KAGPR,KAAKW,UAAUH,IAAaR,KAAKN,kBAC1BM,KAAKY,sBAAsBJ,GAG/BR,KAAKa,kBAAkBL,IAGlCN,gCAAA,SAAoBY,GAApB,WACI,OAAOA,EACFC,MAAM,KACNN,KAAI,SAACD,GAAqB,OAAAQ,EAAKC,gBAAgBT,EAASU,WACxDC,QAAO,SAACC,GAA+B,OAAAA,KACvCV,KAAK,OAGdR,gCAAA,SAAoBC,GAEhB,OAAIH,KAAKqB,sBAAsBlB,IAOnCD,oBAAA,WAAA,WACI,OAAO,SAACoB,GACJA,EAAIC,WAAU,SAACpB,GACX,GAAIa,EAAKQ,oBAAoBrB,GAAU,CAC3B,IAAAK,aAERL,EAAQK,SAAWQ,EAAKS,oBAAoBjB,cAO1DkB,EAAmCC,EAAQC,OAC7C,uBACA,eAAC,aAAAC,mBAAAA,IAAArC,kBAGG,OAAO,IAAIU,aAAAA,aAAcV,MAASsC,aAI1CC,OAAOC,QAAUN"}