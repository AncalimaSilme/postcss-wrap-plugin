{"version":3,"file":"index.js","sources":["../src/types/index.ts","../src/wrapPlugin.ts","../src/index.ts"],"sourcesContent":["export type IWrapSelector = string | string[];\n\nexport enum IHandleRootTags {\n    'replace' = 'replace',\n    'remove' = 'remove',\n}\nexport type IOptions = {\n    wrapSelector: IWrapSelector;\n    handleRootTags?: IHandleRootTags;\n};\n","import { Rule } from 'postcss';\nimport { IHandleRootTags, IOptions } from './types';\n\nconst checkParameters = ({ wrapSelector, handleRootTags }: IOptions): void => {\n    if (typeof wrapSelector !== 'string' && !Array.isArray(wrapSelector)) {\n        throw new Error(\n            'postcss-wrap-plugin: wrapSelector option should be of type a string or an array.',\n        );\n    }\n\n    if (!wrapSelector.length) {\n        throw new Error('postcss-wrap-plugin: empty wrapSelector option.');\n    }\n\n    if (handleRootTags && typeof handleRootTags !== 'string') {\n        throw new Error(\n            'postcss-wrap-plugin: handleRootTags option incorrect type.',\n        );\n    }\n};\n\nconst ROOT_TAG_REGEXP = /\\b(html|body)\\b/g;\n\nexport class WrapPlugin {\n    public wrapSelectors: string[];\n    public handleRootTags: IHandleRootTags | null;\n\n    constructor(options: IOptions) {\n        checkParameters(options);\n\n        const { wrapSelector, handleRootTags } = options;\n\n        this.wrapSelectors = Array.isArray(wrapSelector)\n            ? wrapSelector\n            : [wrapSelector];\n        this.handleRootTags = handleRootTags || null;\n    }\n\n    checkIsCssRuleKeyframes(cssRule: Rule): boolean {\n        const { parent } = cssRule;\n\n        return parent.type === 'atrule' && parent.name.includes('keyframes');\n    }\n\n    isRootTag(selector: string): boolean {\n        ROOT_TAG_REGEXP.lastIndex = 0;\n\n        return ROOT_TAG_REGEXP.test(selector);\n    }\n\n    addWrapToRootSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => {\n                if (this.handleRootTags === IHandleRootTags['remove']) {\n                    return wrapSelector + selector.replace(ROOT_TAG_REGEXP, '');\n                }\n\n                if (this.handleRootTags === IHandleRootTags['replace']) {\n                    return `${wrapSelector}.${selector}`;\n                }\n\n                throw new Error(\n                    'postcss-wrap-plugin: incorrect value for handleRootTags options',\n                );\n            })\n            .join(', ');\n    }\n\n    addWrapToSelector(selector: string): string {\n        return this.wrapSelectors\n            .map((wrapSelector: string) => `${wrapSelector} ${selector}`)\n            .join(', ');\n    }\n\n    wrapCSSSelector(selector: string): string | null {\n        if (selector === '') {\n            return null;\n        }\n\n        if (this.isRootTag(selector) && this.handleRootTags) {\n            return this.addWrapToRootSelector(selector);\n        }\n\n        return this.addWrapToSelector(selector);\n    }\n\n    wrapCssRuleSelector(cssRuleSelector: string): string {\n        return cssRuleSelector\n            .split(',')\n            .map((selector: string) => this.wrapCSSSelector(selector.trim()))\n            .filter((cssSelector: string | null) => cssSelector)\n            .join(', ');\n    }\n\n    checkIncludeCssRule(cssRule: Rule): boolean {\n        // Do not prefix keyframes rules.\n        if (this.checkIsCssRuleKeyframes(cssRule)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    runWrap() {\n        return (css: Rule): boolean | void => {\n            css.walkRules((cssRule: Rule) => {\n                if (this.checkIncludeCssRule(cssRule)) {\n                    const { selector } = cssRule;\n\n                    cssRule.selector = this.wrapCssRuleSelector(selector);\n                }\n            });\n        };\n    }\n}\n","import PostCSS from 'postcss';\nimport { WrapPlugin } from './wrapPlugin';\nimport { IOptions } from './types';\n\nexport default PostCSS.plugin<IOptions>('postcss-wrap-plugin', (...options) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    return new WrapPlugin(...options).runWrap();\n});\n"],"names":["IHandleRootTags","ROOT_TAG_REGEXP","options","_a","wrapSelector","handleRootTags","Array","isArray","Error","length","checkParameters","this","wrapSelectors","WrapPlugin","cssRule","parent","type","name","includes","selector","lastIndex","test","map","_this","replace","join","isRootTag","addWrapToRootSelector","addWrapToSelector","cssRuleSelector","split","wrapCSSSelector","trim","filter","cssSelector","checkIsCssRuleKeyframes","css","walkRules","checkIncludeCssRule","wrapCssRuleSelector","PostCSS","plugin","_i","runWrap"],"mappings":"mBAEYA;;;;;;;;;;;;;;wQAAZ,SAAYA,GACRA,oBACAA,kBAFJ,CAAYA,IAAAA,OCCZ,IAkBMC,EAAkB,gCAMpB,WAAYC,IAxBQ,SAACC,OAAEC,iBAAcC,mBACrC,GAA4B,iBAAjBD,IAA8BE,MAAMC,QAAQH,GACnD,MAAM,IAAII,MACN,oFAIR,IAAKJ,EAAaK,OACd,MAAM,IAAID,MAAM,mDAGpB,GAAIH,GAA4C,iBAAnBA,EACzB,MAAM,IAAIG,MACN,8DAYJE,CAAgBR,GAER,IAAAE,iBAAcC,mBAEtBM,KAAKC,cAAgBN,MAAMC,QAAQH,GAC7BA,EACA,CAACA,GACPO,KAAKN,eAAiBA,GAAkB,KA+EhD,OA5EIQ,oCAAA,SAAwBC,GACZ,IAAAC,WAER,MAAuB,WAAhBA,EAAOC,MAAqBD,EAAOE,KAAKC,SAAS,cAG5DL,sBAAA,SAAUM,GAGN,OAFAlB,EAAgBmB,UAAY,EAErBnB,EAAgBoB,KAAKF,IAGhCN,kCAAA,SAAsBM,GAAtB,WACI,OAAOR,KAAKC,cACPU,KAAI,SAAClB,GACF,GAAImB,EAAKlB,iBAAmBL,EAAwB,OAChD,OAAOI,EAAee,EAASK,QAAQvB,EAAiB,IAG5D,GAAIsB,EAAKlB,iBAAmBL,EAAyB,QACjD,OAAUI,MAAgBe,EAG9B,MAAM,IAAIX,MACN,sEAGPiB,KAAK,OAGdZ,8BAAA,SAAkBM,GACd,OAAOR,KAAKC,cACPU,KAAI,SAAClB,GAAyB,OAAGA,MAAgBe,KACjDM,KAAK,OAGdZ,4BAAA,SAAgBM,GACZ,MAAiB,KAAbA,EACO,KAGPR,KAAKe,UAAUP,IAAaR,KAAKN,eAC1BM,KAAKgB,sBAAsBR,GAG/BR,KAAKiB,kBAAkBT,IAGlCN,gCAAA,SAAoBgB,GAApB,WACI,OAAOA,EACFC,MAAM,KACNR,KAAI,SAACH,GAAqB,OAAAI,EAAKQ,gBAAgBZ,EAASa,WACxDC,QAAO,SAACC,GAA+B,OAAAA,KACvCT,KAAK,OAGdZ,gCAAA,SAAoBC,GAEhB,OAAIH,KAAKwB,wBAAwBrB,IAOrCD,oBAAA,WAAA,WACI,OAAO,SAACuB,GACJA,EAAIC,WAAU,SAACvB,GACX,GAAIS,EAAKe,oBAAoBxB,GAAU,CAC3B,IAAAK,aAERL,EAAQK,SAAWI,EAAKgB,oBAAoBpB,gBCzGjDqB,EAAQC,OAAiB,uBAAuB,eAAC,aAAAC,mBAAAA,IAAAxC,kBAG5D,OAAO,IAAIW,aAAAA,aAAcX,MAASyC"}